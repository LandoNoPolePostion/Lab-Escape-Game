import random
import time

# Player stats
player_health = 100
player_inventory = []  
pistol_ammo = 10  
rifle_ammo = 5    

# Monster stats
monsters = {
    "a Mutant Rat": {"health": 30, "damage": 10},
    "a Lab Zombie": {"health": 50, "damage": 15},
    "a Viral Creature": {"health": 80, "damage": 20},
    "The Experiment": {"health": random.randint(100, 115), "damage": random.randint(45, 52)}  
}

# Item stats
items = {
    "Health Potion": 30,  
    "Red Bull": 10        
}

# Weapon stats as items (M72 LAW removed)
weapon_items = {
    "Knife": {"damage": 20, "ammo_required": 0, "infinite": True},
    "Pistol": {"damage": 30, "ammo_required": 1},
    "Rifle": {"damage": 50, "ammo_required": 1},
    "Chemical": {"damage": 75, "ammo_required": 0, "poison": True, "one_time": True},  
}

# Introduction
def intro():
    print("Welcome to the Yellowstone Incident!")
    print("A failed experiment has turned the Yellowstone Laboratory into a dangerous place.")
    print("You need to navigate through random hallways, fight monsters, and escape.")
    print("Good luck!")

def print_status():
    print(f"\nYour health: {player_health}")
    print(f"Inventory: {player_inventory}")
    print(f"Pistol Ammo: {pistol_ammo}")
    print(f"Rifle Ammo: {rifle_ammo}")
    if pistol_ammo <= 0:
        print("You are out of Pistol ammo!")
    if rifle_ammo <= 0:
        print("You are out of Rifle ammo!")
    print("-" * 30)

# Main Menu
def main_menu():
    print("Welcome to the Abandoned Laboratory Escape Game!")
    print("1. Start a New Game")
    print("2. Quit")

    choice = input("Enter the number of your choice: ")

    if choice == "1":
        print("\nStarting a new game...\n")
        return True  # Start the game
    elif choice == "2":
        print("\nThanks for playing! Goodbye.")
        exit()  # Quit the game
    else:
        print("Invalid choice. Please choose again.")
        return main_menu()  

# Combat function
def combat(monster_name, monster_health, monster_damage):
    global player_health, pistol_ammo, rifle_ammo
    red_bull_active = False  # Tracks if Red Bull boost is active

    print(f"\nYou encounter a {monster_name}!")
    print(f"It has {monster_health} health and deals {monster_damage} damage.")

    while monster_health > 0 and player_health > 0:
        print_status()
        print(f"Items available from inventory: {player_inventory}")
        choice = input("Choose your action (Weapon/Consumable): ").title()

        # Handle consumables
        if choice in ["Red Bull", "Health Potion"] and choice in player_inventory:
            if choice == "Red Bull":
                red_bull_active = True  
                print("\nYou drink Red Bull! All weapon damage is increased by 10 for this combat.")
                player_inventory.remove("Red Bull")  
            elif choice == "Health Potion":
                player_health = min(player_health + 30, 100)  
                print("\nYou drink a Health Potion and recover 30 HP!")
                player_inventory.remove("Health Potion")  
            continue

        # Handle weapon choice
        if choice in weapon_items and choice in player_inventory:
            weapon = weapon_items[choice]
            damage_boost = 10 if red_bull_active else 0  

            if choice == "Pistol" and pistol_ammo <= 0:
                print("\nYou are out of pistol ammo!")
                continue
            elif choice == "Rifle" and rifle_ammo <= 0:
                print("\nYou are out of rifle ammo!")
                continue

            # Determine weapon damage
            if choice == "Pistol":
                pistol_ammo -= weapon["ammo_required"]
                damage_dealt = random.randint(25, 35) + damage_boost
                monster_health -= damage_dealt
                print(f"You fire the pistol and deal {damage_dealt} damage to the {monster_name}!")
            elif choice == "Rifle":
                rifle_ammo -= weapon["ammo_required"]
                damage_dealt = random.randint(40, 60) + damage_boost
                monster_health -= damage_dealt
                print(f"You fire the rifle and deal {damage_dealt} damage to the {monster_name}!")
            elif choice == "Knife":
                damage_dealt = random.randint(18, 22) + damage_boost
                monster_health -= damage_dealt
                print(f"You stab the {monster_name} with the knife and deal {damage_dealt} damage!")
            elif choice == "Chemical":
                poison_damage = 75 + damage_boost
                monster_health -= poison_damage
                print(f"You throw the chemical and deal {poison_damage} damage to the {monster_name}!")
                player_inventory.remove("Chemical")  

            # Monster counterattack
            if monster_health > 0:
                player_health -= monster_damage
                print(f"The {monster_name} attacks you for {monster_damage} damage!")
        else:
            print("Invalid choice or you don't have that in your inventory. Please choose a valid option.")
            continue

        if player_health <= 0:
            print("\nYou have been defeated. Game Over.")
            return False  # Player lost combat

    if monster_health <= 0:
        print(f"You defeated the {monster_name}!")
        return True  # Player won combat

# Random event chance for lab events
def random_event():
    # Define the chances (percentages) for each event
    chance_for_nothing = 25  
    chance_for_item = 40    
    chance_for_monster = 30  
    chance_for_exit = 5     

    # Generate a random number between 1 and 100
    random_number = random.randint(1, 100)

    # Determine which event occurs based on the random number and the probabilities
    if random_number <= chance_for_nothing:
        print("You find nothing in this hallway.")
        return "nothing"
    
    elif random_number <= chance_for_nothing + chance_for_item:
        print("You find an item!")
        return "item"
    
    elif random_number <= chance_for_nothing + chance_for_item + chance_for_monster:
        print("You encounter a monster!")
        return "monster"
    
    elif random_number <= chance_for_nothing + chance_for_item + chance_for_monster + chance_for_exit:
        print("You have found the exit!")
        return "exit"

    else:
        return "unexpected"

# Hallway navigation: Choose left, right, or straight
def choose_direction():
    global player_health
    
    print("\nYou reach a junction in the hallway.")
    choice = input("Do you want to go [L]eft, [R]ight, or [S]traight? ").lower()

    if choice == "l":
        print("\nYou choose to go left...")
        return random_event()

    elif choice == "r":
        print("\nYou choose to go right...")
        return random_event()

    elif choice == "s":
        print("\nYou choose to go straight...")
        return random_event()

    else:
        print("Invalid choice. Please choose 'L', 'R', or 'S'.")
        return choose_direction()  

# Item find function
def find_item():
    item_chances = {
        "Pistol": 20,  # 20% chance to find Pistol
        "Rifle": 20,   # 15% chance to find Rifle
        "Pistol Ammo": 15,  # 15% chance to find Pistol Ammo
        "Rifle Ammo": 15,   # 15% chance to find Rifle Ammo
        "Health Potion": 10,  # 10% chance to find Health Potion
        "Red Bull": 10,   # 10% chance to find Red Bull
        "Chemical": 10,   # 5% chance to find Chemical
    }

    item_roll = random.randint(1, 100)
    cumulative_chance = 0
    for item, chance in item_chances.items():
        cumulative_chance += chance
        if item_roll <= cumulative_chance:
            # Check if the player already has the weapon in their inventory
            if item in ["Pistol", "Rifle", "Chemical"]:
                if item in player_inventory:
                    print(f"You already have a {item}. No need to pick it up again.")
                    return item  # Skip picking up the weapon if the player already has it
                else:
                    player_inventory.append(item)  # Add the weapon to the inventory
                    print(f"Found a {item}!")
            # For ammo items, just add them to the inventory
            elif item == "Pistol Ammo":
                global pistol_ammo
                pistol_ammo += random.randint(1, 5)  # Add 1 to 5 pistol ammo
                print(f"Found some {item}! You now have {pistol_ammo} Pistol ammo.")
            elif item == "Rifle Ammo":
                global rifle_ammo
                rifle_ammo += random.randint(1, 3)  # Add 1 to 3 rifle ammo
                print(f"Found some {item}! You now have {rifle_ammo} Rifle ammo.")
            elif item == "Health Potion":
                player_inventory.append("Health Potion")
                print(f"Found a {item}!")
            elif item == "Red Bull":
                player_inventory.append("Red Bull")
                print(f"Found a {item}!")
            return item

    print("You found nothing in the hallway.")
    return None


# Main game loop
def main():
    global player_health

    # Show the main menu
    if main_menu():
        intro()

        # Add only the Knife to the player's inventory at the start
        player_inventory.append("Knife")

        while player_health > 0:
            event_result = choose_direction()

            # If any event leads to player dying or escaping, break loop
            if event_result == "nothing":
                print("\nYou continue exploring the lab...\n")
            elif event_result == "item":
                find_item()
            elif event_result == "monster":
                monster = random.choice(list(monsters.keys()))
                monster_health = monsters[monster]["health"]
                monster_damage = monsters[monster]["damage"]
                if not combat(monster, monster_health, monster_damage):
                    break  # Player lost in combat
            elif event_result == "exit":
                print("\nCongratulations! You escaped the lab!")
                break  # Player escaped

            time.sleep(1)  # Simulate time passing

        print("\nGame Over. Thank you for playing!")

# Start the game
main()
